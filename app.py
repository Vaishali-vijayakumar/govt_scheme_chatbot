from flask import Flask, request, jsonify, render_template
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

user_data = {}

# Tamil & English scheme apply steps
scheme_steps = {
    "PM-KISAN": "ЁЯУМ Visit https://pmkisan.gov.in\nЁЯз╛ Click 'Farmers Corner' > 'New Farmer Registration'\nЁЯУД Submit Aadhaar, bank & land details.",
    "Ayushman Bharat": "ЁЯУМ Visit https://pmjay.gov.in\nЁЯз╛ Check your name under eligibility.\nЁЯПе Visit nearest empanelled hospital with ID proof.",
    "Kalaignar Magalir Urimai Thogai": "ЁЯУМ Apply via Tamil Nadu e-Sevai centers or https://kmut.tn.gov.in\nЁЯз╛ Aadhaar-linked bank account required.\nЁЯУД Submit ration card, income certificate.",
    "Old Age Pension": "ЁЯУМ Apply at your local Panchayat/Revenue Office.\nЁЯУД Submit Age proof, income proof & Aadhaar.",
    "Widow Pension Scheme": "ЁЯУМ Submit application at Social Welfare Department or online (state portals).\nЁЯУД Required: Death Certificate of spouse, Aadhaar, income proof.",
    "Free Laptop Scheme": "ЁЯУМ School/college will register eligible students.\nЁЯз╛ No separate application needed. Contact institution head.",
    "PMEGP Loan": "ЁЯУМ Visit https://www.kviconline.gov.in/pmegp\nЁЯУД Register, fill online form with Aadhaar, project details\nЁЯПж Submit via your preferred bank/financial institution.",
    "SC/ST Scholarships": "ЁЯУМ Visit https://scholarships.gov.in\nЁЯз╛ Select Post/Pre Matric Scholarship.\nЁЯУД Submit caste certificate, Aadhaar, income proof, marksheets.",
    "OBC Scholarships": "ЁЯУМ Apply via https://scholarships.gov.in or TN e-district portal\nЁЯУД Need caste/income proof, marksheets, bank details.",
    "NMMS": "ЁЯУМ Application through school\nЁЯз╛ Attend exam conducted by education department\nЁЯУД Aadhaar, income certificate, marksheets needed.",
    "CMCHIS": "ЁЯУМ Enroll at TN e-Sevai centers or special camps\nЁЯз╛ Submit Aadhaar, ration card\nЁЯПе Get e-card, use at empanelled hospitals.",
    "PMAY Gramin": "ЁЯУМ Visit https://pmayg.nic.in\nЁЯз╛ Apply via Panchayat/online.\nЁЯУД Aadhaar, income, land ownership proof needed.",
    "National Apprenticeship Promotion Scheme": "ЁЯУМ Register at https://apprenticeshipindia.gov.in\nЁЯУД Aadhaar, qualification, bank details required.\nЁЯПв Find and apply to listed employers.",
    "Uzhavar Pathukappu Thittam": "ЁЯУМ Tamil Nadu Agriculture Department\nЁЯз╛ For registered TN farmers.\nЁЯУД Aadhaar, chitta copy, bank passbook.",
    "Destitute Women Pension": "ЁЯУМ Apply through TN Social Welfare Dept.\nЁЯУД Widow certificate, income proof, Aadhaar.\nЁЯСйтАНЁЯж│ For deserted/divorced women."
}

def respond(en_text, ta_text=None):
    return en_text + (f"\n{ta_text}" if ta_text else "")

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/chat", methods=['POST'])
def chatbot():
    data = request.get_json()
    incoming_msg = data.get('message', '').strip()
    sender = data.get('sender', 'default_user')
    response_text = ""

    if sender not in user_data:
        user_data[sender] = {'step': 0, 'eligible_schemes': []}

    step = user_data[sender]['step']

    if step == 0:
        response_text = "ЁЯЩП ро╡рогроХрпНроХроорпН! IтАЩll help you check eligibility for govt schemes. Shall we begin? (Yes/No)"
        user_data[sender]['step'] = 1

    elif step == 1:
        if 'yes' in incoming_msg.lower():
            response_text = "ЁЯУМ Please tell me your age (in years):"
            user_data[sender]['step'] = 2
        else:
            response_text = "Okay. Type 'Hi' anytime to start again."
            user_data[sender]['step'] = 0

    elif step == 2:
        try:
            user_data[sender]['age'] = int(incoming_msg)
            response_text = "ЁЯТ░ What is your monthly family income (in тВ╣)?"
            user_data[sender]['step'] = 3
        except ValueError:
            response_text = "тЭЧ Please enter a valid number for age."

    elif step == 3:
        try:
            user_data[sender]['income'] = int(incoming_msg.replace("тВ╣", "").replace(",", "").strip())
            response_text = "ЁЯП╖я╕П Caste? (SC/ST/OBC/General):"
            user_data[sender]['step'] = 4
        except ValueError:
            response_text = "тЭЧ Please enter a valid number for income."

    elif step == 4:
        user_data[sender]['caste'] = incoming_msg.upper()
        response_text = "ЁЯУН State and District? (e.g., Tamil Nadu, Thanjavur):"
        user_data[sender]['step'] = 5

    elif step == 5:
        user_data[sender]['location'] = incoming_msg
        response_text = "ЁЯСйтАНЁЯМ╛ Occupation? (Farmer/Student/Widow/Unemployed/etc.):"
        user_data[sender]['step'] = 6

    elif step == 6:
        user_data[sender]['occupation'] = incoming_msg
        age = user_data[sender]['age']
        income = user_data[sender]['income']
        caste = user_data[sender]['caste']
        occ = user_data[sender]['occupation'].lower()
        state = user_data[sender]['location'].lower()

        eligible = []
        schemes = respond("ЁЯОп Based on your profile, you may be eligible for:\n\n", "ЁЯОп роЙроЩрпНроХро│рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИрокрпН рокрпКро▒рпБродрпНродрпБ, роирпАроЩрпНроХро│рпН рокрпЖро▒роХрпНроХрпВроЯро┐роп родро┐роЯрпНроЯроЩрпНроХро│рпН:\n\n")

        if occ == 'farmer':
            eligible += ["PM-KISAN", "PMAY Gramin"]
            schemes += respond("ЁЯМ╛ PM-KISAN: тВ╣6000/year support to farmers.\n", "ЁЯМ╛ PM-KISAN: роЖрогрпНроЯрпБроХрпНроХрпБ тВ╣6000 роиро┐ро▓родрпНродроЯро┐ ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛роХ.\n")
            schemes += respond("ЁЯПа PMAY Gramin: Rural housing subsidy up to тВ╣1.2 lakh.\n", "ЁЯПа роХро┐ро░ро╛роорокрпНрокрпБро▒ ро╡рпАроЯрпНроЯрпБ рооро╛ройро┐ропроорпН тВ╣1.2 ро▓роЯрпНроЪроорпН ро╡ро░рпИ.\n")
            if "tamil nadu" in state:
                eligible.append("Uzhavar Pathukappu Thittam")
                schemes += respond("ЁЯМ▒ Uzhavar Pathukappu Thittam: Farmer insurance + aid in TN.\n", "ЁЯМ▒ роЙро┤ро╡ро░рпН рокро╛родрпБроХро╛рокрпНрокрпБродрпН родро┐роЯрпНроЯроорпН: ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛рой рокро╛родрпБроХро╛рокрпНрокрпБ.\n")

        if age >= 60:
            eligible.append("Old Age Pension")
            schemes += respond("ЁЯС╡ Old Age Pension: тВ╣200тАУтВ╣500/month for senior citizens.\n", "ЁЯС╡ роорпВрокрпНрокрпБрокрпН рокрпЖройрпНро╖ройрпН тВ╣200тАУтВ╣500 рооро╛родроорпН.\n")

        if occ == 'widow':
            eligible.append("Widow Pension Scheme")
            schemes += respond("ЁЯСйтАНЁЯж│ Widow Pension: тВ╣300тАУтВ╣500/month support.\n", "ЁЯСйтАНЁЯж│ ро╡ро┐родро╡рпИ рокрпЖройрпНро╖ройрпН тВ╣300тАУтВ╣500 рооро╛родроорпН.\n")
            if "tamil nadu" in state:
                eligible.append("Destitute Women Pension")
                schemes += respond("ЁЯСйтАНЁЯж│ Destitute Women Pension: тВ╣1000/month for TN deserted/divorced women.\n", "ЁЯСйтАНЁЯж│ ро╡ро┐родро╡рпИ/родрпКро┤ро┐ро▓ро┐ро┤роирпНрод рокрпЖрогрпНроХро│рпБроХрпНроХрпБ тВ╣1000 роЙродро╡ро┐родрпН родрпКроХрпИ.\n")

        if occ == 'unemployed' and age <= 30:
            eligible.append("PMEGP Loan")
            schemes += respond("ЁЯзСтАНЁЯТ╗ PMEGP Loan: Business loan + subsidy.\n", "ЁЯзСтАНЁЯТ╗ PMEGP: родрпКро┤ро┐ро▓рпН родрпКроЯроЩрпНроХ роХроЯройрпН + рооро╛ройро┐ропроорпН.\n")
            eligible.append("National Apprenticeship Promotion Scheme")
            schemes += respond("ЁЯЫая╕П NAPS: Skill training + stipend.\n", "ЁЯЫая╕П родрпЗроЪро┐роп рокропро┐ро▒рпНроЪро┐ роКроХрпНроХродрпНродро┐роЯрпНроЯроорпН.\n")

        if caste in ['SC', 'ST']:
            eligible.append("SC/ST Scholarships")
            schemes += respond("ЁЯПл SC/ST Scholarships: Central/state education aid.\n", "ЁЯПл SC/ST роХро▓рпНро╡ро┐ роЙродро╡ро┐родрпНродрпКроХрпИ.\n")

        if caste == 'OBC':
            eligible.append("OBC Scholarships")
            schemes += respond("ЁЯУШ OBC Scholarships: For school/college students.\n", "ЁЯУШ OBC роХро▓рпНро╡ро┐ роЙродро╡ро┐родрпНродрпКроХрпИ.\n")

        if income < 15000:
            eligible.append("Ayushman Bharat")
            schemes += respond("ЁЯПе Ayushman Bharat (PMJAY): тВ╣5L health insurance.\n", "ЁЯПе роЖропрпБро╖рпНрооро╛ройрпН рокро╛ро░родрпН: тВ╣5 ро▓роЯрпНроЪроорпН рооро░рпБродрпНродрпБро╡ роХро╛рокрпНрокрпАроЯрпБ.\n")

        if occ == 'student' and age <= 25:
            eligible.append("NMMS")
            schemes += respond("ЁЯОУ NMMS: Monthly stipend for school students.\n", "ЁЯОУ NMMS: рокро│рпНро│ро┐ рооро╛рогро╡ро░рпНроХро│рпБроХрпНроХрпБ рооро╛род роЙродро╡ро┐родрпНродрпКроХрпИ.\n")

        if "tamil nadu" in state:
            eligible += ["Kalaignar Magalir Urimai Thogai", "Free Laptop Scheme", "CMCHIS"]
            schemes += respond("ЁЯзХ Kalaignar Magalir Urimai Thogai: тВ╣1000/month for women heads.\n", "ЁЯзХ роороХро│ро┐ро░рпН роЙро░ро┐роорпИ родрпКроХрпИ тВ╣1000 рооро╛родроорпН.\n")
            schemes += respond("ЁЯОУ Free Laptop Scheme: Govt students in Class 11/College.\n", "ЁЯОУ роЗро▓ро╡роЪ ро▓ро╛рокрпНроЯро╛рокрпН роЕро░роЪрпБ рокро│рпНро│ро┐/роХро▓рпНро▓рпВро░ро┐роХрпНроХрпБ.\n")
            schemes += respond("ЁЯЫПя╕П CMCHIS: TN health insurance тВ╣5L/year.\n", "ЁЯЫПя╕П роорпБродро▓рпНро╡ро░ро┐ройрпН рооро░рпБродрпНродрпБро╡ роХро╛рокрпНрокрпАроЯрпБ тВ╣5 ро▓роЯрпНроЪроорпН.\n")

        user_data[sender]['eligible_schemes'] = eligible
        schemes += "\nЁЯУе Would you like steps to apply for any of these? (Yes/No)"
        response_text = schemes.strip()
        user_data[sender]['step'] = 7

    elif step == 7:
        if 'yes' in incoming_msg.lower():
            response_text = "тЬНя╕П Please type the name of the scheme you'd like to apply for (e.g., PM-KISAN):"
            user_data[sender]['step'] = 8
        else:
            response_text = "тЬЕ Okay. You can type 'Hi' anytime to check again."
            user_data[sender]['step'] = 0

    elif step == 8:
        scheme = incoming_msg.strip().upper()
        matched = None
        for key in scheme_steps:
            if key.lower() in scheme.lower():
                matched = key
                break

        if matched:
            response_text = f"ЁЯУЭ Steps to apply for {matched}:\n{scheme_steps[matched]}"
        else:
            response_text = "тЭЧ Sorry, I donтАЩt have steps for that scheme yet. Try another or type 'Hi' to restart."
        user_data[sender]['step'] = 0

    return jsonify({"reply": response_text})

if __name__ == "__main__":
    app.run(debug=True)
